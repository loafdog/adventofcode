#!/usr/bin/env ruby

# MY NOTES
#
# Part 1 was not bad.  My first attempt solved it with only few
# mistakes.  Part 2 was hard.  I ended up rewriting parts of solution
# for part 1(add _2 to funcs) to be able to solve for arbitrary number
# of knots.  I left part 1 code alone so i could compare results of
# two versions of code.  And just so can see diff in ideas/code.  Part
# 2 took me awhile to solve because I did not understand knot
# movement. It is different than when you have 2 knots vs > 2.  See
# comments in tail_move method.


# https://adventofcode.com/2022/day/9

# --- Day 9: Rope Bridge ---
# This rope bridge creaks as you walk along it. You aren't sure how old it is, or whether it can even support your weight.

# It seems to support the Elves just fine, though. The bridge spans a gorge which was carved out by the massive river far below you.

# You step carefully; as you do, the ropes stretch and twist. You decide to distract yourself by modeling rope physics; maybe you can even figure out where not to step.

# Consider a rope with a knot at each end; these knots mark the head and the tail of the rope. If the head moves far enough away from the tail, the tail is pulled toward the head.

# Due to nebulous reasoning involving Planck lengths, you should be able to model the positions of the knots on a two-dimensional grid. Then, by following a hypothetical series of motions (your puzzle input) for the head, you can determine how the tail will move.

# Due to the aforementioned Planck lengths, the rope must be quite short; in fact, the head (H) and tail (T) must always be touching (diagonally adjacent and even overlapping both count as touching):

# ....
# .TH.
# ....

# ....
# .H..
# ..T.
# ....

# ...
# .H. (H covers T)
# ...
# If the head is ever two steps directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains close enough:

# .....    .....    .....
# .TH.. -> .T.H. -> ..TH.
# .....    .....    .....

# ...    ...    ...
# .T.    .T.    ...
# .H. -> ... -> .T.
# ...    .H.    .H.
# ...    ...    ...
# Otherwise, if the head and tail aren't touching and aren't in the same row or column, the tail always moves one step diagonally to keep up:

# .....    .....    .....
# .....    ..H..    ..H..
# ..H.. -> ..... -> ..T..
# .T...    .T...    .....
# .....    .....    .....

# .....    .....    .....
# .....    .....    .....
# ..H.. -> ...H. -> ..TH.
# .T...    .T...    .....
# .....    .....    .....
# You just need to work out where the tail goes as the head follows a series of motions. Assume the head and the tail both start at the same position, overlapping.

# For example:

# R 4
# U 4
# L 3
# D 1
# R 4
# D 1
# L 5
# R 2
# This series of motions moves the head right four steps, then up four steps, then left three steps, then down one step, and so on. After each step, you'll need to update the position of the tail if the step means the head is no longer adjacent to the tail. Visually, these motions occur as follows (s marks the starting position as a reference point):

# == Initial State ==

# ......
# ......
# ......
# ......
# H.....  (H covers T, s)

# == R 4 ==

# ......
# ......
# ......
# ......
# TH....  (T covers s)

# ......
# ......
# ......
# ......
# sTH...

# ......
# ......
# ......
# ......
# s.TH..

# ......
# ......
# ......
# ......
# s..TH.

# == U 4 ==

# ......
# ......
# ......
# ....H.
# s..T..

# ......
# ......
# ....H.
# ....T.
# s.....

# ......
# ....H.
# ....T.
# ......
# s.....

# ....H.
# ....T.
# ......
# ......
# s.....

# == L 3 ==

# ...H..
# ....T.
# ......
# ......
# s.....

# ..HT..
# ......
# ......
# ......
# s.....

# .HT...
# ......
# ......
# ......
# s.....

# == D 1 ==

# ..T...
# .H....
# ......
# ......
# s.....

# == R 4 ==

# ..T...
# ..H...
# ......
# ......
# s.....

# ..T...
# ...H..
# ......
# ......
# s.....

# ......
# ...TH.
# ......
# ......
# s.....

# ......
# ....TH
# ......
# ......
# s.....

# == D 1 ==

# ......
# ....T.
# .....H
# ......
# s.....

# == L 5 ==

# ......
# ....T.
# ....H.
# ......
# s.....

# ......
# ....T.
# ...H..
# ......
# s.....

# ......
# ......
# ..HT..
# ......
# s.....

# ......
# ......
# .HT...
# ......
# s.....

# ......
# ......
# HT....
# ......
# s.....

# == R 2 ==

# ......
# ......
# .H....  (H covers T)
# ......
# s.....

# ......
# ......
# .TH...
# ......
# s.....
# After simulating the rope, you can count up all of the positions the tail visited at least once. In this diagram, s again marks the starting position (which the tail also visited) and # marks other positions the tail visited:

# ..##..
# ...##.
# .####.
# ....#.
# s###..
# So, there are 13 positions the tail visited at least once.

# Simulate your complete hypothetical series of motions. How many positions does the tail of the rope visit at least once?

# Your puzzle answer was 6011.

# The first half of this puzzle is complete! It provides one gold star: *

# --- Part Two ---
# A rope snaps! Suddenly, the river is getting a lot closer than you remember. The bridge is still there, but some of the ropes that broke are now whipping toward you as you fall through the air!

# The ropes are moving too quickly to grab; you only have a few seconds to choose how to arch your body to avoid being hit. Fortunately, your simulation can be extended to support longer ropes.

# Rather than two knots, you now must simulate a rope consisting of ten knots. One knot is still the head of the rope and moves according to the series of motions. Each knot further down the rope follows the knot in front of it using the same rules as before.

# Using the same series of motions as the above example, but with the knots marked H, 1, 2, ..., 9, the motions now occur as follows:

# == Initial State ==

# ......
# ......
# ......
# ......
# H.....  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)

# == R 4 ==

# ......
# ......
# ......
# ......
# 1H....  (1 covers 2, 3, 4, 5, 6, 7, 8, 9, s)

# ......
# ......
# ......
# ......
# 21H...  (2 covers 3, 4, 5, 6, 7, 8, 9, s)

# ......
# ......
# ......
# ......
# 321H..  (3 covers 4, 5, 6, 7, 8, 9, s)

# ......
# ......
# ......
# ......
# 4321H.  (4 covers 5, 6, 7, 8, 9, s)

# == U 4 ==

# ......
# ......
# ......
# ....H.
# 4321..  (4 covers 5, 6, 7, 8, 9, s)

# ......
# ......
# ....H.
# .4321.
# 5.....  (5 covers 6, 7, 8, 9, s)

# ......
# ....H.
# ....1.
# .432..
# 5.....  (5 covers 6, 7, 8, 9, s)

# ....H.
# ....1.
# ..432.
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == L 3 ==

# ...H..
# ....1.
# ..432.
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ..H1..
# ...2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# .H1...
# ...2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == D 1 ==

# ..1...
# .H.2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == R 4 ==

# ..1...
# ..H2..
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ..1...
# ...H..  (H covers 2)
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...1H.  (1 covers 2)
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...21H
# ..43..
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == D 1 ==

# ......
# ...21.
# ..43.H
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == L 5 ==

# ......
# ...21.
# ..43H.
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...21.
# ..4H..  (H covers 3)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...2..
# ..H1..  (H covers 4; 1 covers 3)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ...2..
# .H13..  (1 covers 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ......
# H123..  (2 covers 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# == R 2 ==

# ......
# ......
# .H23..  (H covers 1; 2 covers 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)

# ......
# ......
# .1H3..  (H covers 2, 4)
# .5....
# 6.....  (6 covers 7, 8, 9, s)
# Now, you need to keep track of the positions the new tail, 9, visits. In this example, the tail never moves, and so it only visits 1 position. However, be careful: more types of motion are possible than before, so you might want to visually compare your simulated rope to the one above.

# Here's a larger example:

# R 5
# U 8
# L 8
# D 3
# R 17
# D 10
# L 25
# U 20
# These motions occur as follows (individual steps are not shown):

# == Initial State ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == R 5 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........54321H.........  (5 covers 6, 7, 8, 9, s)
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == U 8 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ................H.........
# ................1.........
# ................2.........
# ................3.........
# ...............54.........
# ..............6...........
# .............7............
# ............8.............
# ...........9..............  (9 covers s)
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == L 8 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ........H1234.............
# ............5.............
# ............6.............
# ............7.............
# ............8.............
# ............9.............
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == D 3 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# .........2345.............
# ........1...6.............
# ........H...7.............
# ............8.............
# ............9.............
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == R 17 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ................987654321H
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# == D 10 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s.........98765
# .........................4
# .........................3
# .........................2
# .........................1
# .........................H

# == L 25 ==

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# H123456789................

# == U 20 ==

# H.........................
# 1.........................
# 2.........................
# 3.........................
# 4.........................
# 5.........................
# 6.........................
# 7.........................
# 8.........................
# 9.........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ...........s..............
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................

# Now, the tail (9) visits 36 positions (including s) at least once:

# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# ..........................
# #.........................
# #.............###.........
# #............#...#........
# .#..........#.....#.......
# ..#..........#.....#......
# ...#........#.......#.....
# ....#......s.........#....
# .....#..............#.....
# ......#............#......
# .......#..........#.......
# ........#........#........
# .........########.........
# Simulate your complete series of motions on a larger rope with ten knots. How many positions does the tail of the rope visit at least once?



#0 ..........................0
#9 ..........................9
#8 ..........................8
#7 ..........................7
#6 ..........................6
#5 ..........................5
#4 ..........................4
#3 ..........................3
#2 ..........................2
#1 #.........................1
#0 #.............###.........0
#9 #............#...#........9
#8 .#..........#.....#.......8
#7 ..#..........#.....#......7
#6 ...#........#.......#.....6
#5 ....#......s.........#....5
#4 .....#..............#.....4
#3 ......#............#......3
#2 .......#..........#.......2
#1 ........#........#........1
#0 .........########.........0
#  01234567890123456789012345
require 'pry'

class Puzzle

  attr_accessor :moves
  attr_accessor :visited

  def initialize(moves, diff)
    @moves = moves
    @diff = diff
    @visited = {}
    @xmin = @xmax = @ymin = @ymax = 0
    @debug = false

  end


  def max(a,b)
    a>b ? a : b
  end

  def min(a,b)
    a<b ? a : b
  end

  def test_moves()
    xmax = xmin = x = 0
    ymax = ymin = y = 0
    @moves.each do |m|
      (dir, num) = m.split(' ')
      num = num.to_i
      #puts "#{dir} #{num}"
      if dir == 'R'
        x += num
        xmax = max(x, xmax)
      elsif dir == 'L'
        x -= num
        xmin = min(x, xmin)
      elsif dir == 'U'
        y += num
        ymax = max(y, ymax)
      elsif dir == 'D'
        y -= num
        ymin = min(y, ymin)
      end
    end
    puts "x=#{x} y=#{y} xmin=#{xmin} xmax=#{xmax} ymin=#{xmin} ymax=#{xmax}"
    @xmin = xmin
    @xmax = xmax
    @ymin = ymin
    @ymax = ymax
  end


  def print_visits(knots=nil)
    r = 0
    c = 0
    rows = @ymin.abs + @ymax.abs
    cols = @xmin.abs + @xmax.abs
    @ymax.downto(@ymin) do |y|
      # print row,yaxis numbering on left side
      print rows % 10
      print ' '
      
      @xmin.upto(@xmax) do |x|
        v = "#{x},#{y}"
        if knots.include?([x,y])
          i=knots.find_index([x,y])
          print i
        elsif @visited.key?(v)
          print "#"
        else
          print "."
        end
        # if @visited.key?(v)
        #   print "#"
        # elsif knots.nil?
        #   print "."
        # elsif knots.include?([x,y])
        #   i=knots.find_index([x,y])
        #   print i
        #   #print "x"
        # else
        #   print "."
        # end
      end
      # print row,yaxis numbering on right side
      print rows % 10
      rows-=1
      puts ""
    end
    print '  '
    0.upto(cols) do |c|
      print c%10
    end
    puts ""
    STDOUT.flush
  end

  def mark_visit(x,y)
    if @visited.has_key?("#{x},#{y}")
      @visited["#{x},#{y}"] +=1
    else
      @visited["#{x},#{y}"] = 1
    end
  end

  def should_tail_move(xh,yh,xt,yt)

    # examples:
    #
    # .T.  1,2
    # .H.  1,1
    # ...      diff 0,1
    #
    # .T.  1,2
    # H..  0,1 diff 1,1
    # ...
    #
    # ...
    # H..  0,1
    # .T.  1,0 diff 1,1
    #
    # ..T  2,2
    # H..  0,1 diff 2,1
    # ...
    #
    # ..T  2,2
    # ...  0,2 diff 2,0
    # ..H
    #
    # ..T  2,2
    # ...  0,2 diff 2,0
    # ..H


    xdiff = xh - xt
    ydiff = yh - yt

    if xdiff.abs > @diff || ydiff.abs > @diff
      return true
    end
    return false
  end

  #############################################################################

  def move_right(xh,yh,xt,yt,steps)
    0.upto(steps) do |s|
      xh += 1
      if should_tail_move(xh,yh,xt,yt)
        xt = xh - 1
        yt = yh
        mark_visit(xt,yt)
      end
    end
    return xh,yh,xt,yt
  end

  def move_left(xh,yh,xt,yt,steps)
    0.upto(steps) do |s|
      xh -= 1
      if should_tail_move(xh,yh,xt,yt)
        xt = xh + 1
        yt = yh
        mark_visit(xt,yt)
      end
    end
    return xh,yh,xt,yt
  end

  def move_up(xh,yh,xt,yt,steps)
    0.upto(steps) do |s|
      yh += 1
      if should_tail_move(xh,yh,xt,yt)
        yt = yh-1
        xt = xh
        mark_visit(xt,yt)
      end
    end
    return xh,yh,xt,yt
  end

  def move_down(xh,yh,xt,yt,steps)
    0.upto(steps) do |s|
      yh -= 1
      if should_tail_move(xh,yh,xt,yt)
        yt = yh+1
        xt = xh
        mark_visit(xt,yt)
      end
    end
    return xh,yh,xt,yt
  end

  def make_moves(moves)
    # if start at 0 could end up in negative space which makes printing array harder?
    xh=yh=0
    xt=yt=0
    # xh=yh=@xmin
    # xt=yt=@ymin

    # print_visits()
    # puts "="*80

    mark_visit(xt,yt)
    moves.each do |m|
      (dir, num) = m.split(' ')
      num = num.to_i
      #puts "#{dir} #{num} start h=#{xh},#{yh} t=#{xt},#{yt}"
      if dir == 'R'
        xh,yh,xt,yt = move_right(xh,yh,xt,yt,num-1)
      elsif dir == 'L'
        xh,yh,xt,yt = move_left(xh,yh,xt,yt,num-1)
      elsif dir == 'U'
        xh,yh,xt,yt = move_up(xh,yh,xt,yt,num-1)
      elsif dir == 'D'
        xh,yh,xt,yt = move_down(xh,yh,xt,yt,num-1)
      end
      # puts "#{dir} #{num} end   h=#{xh},#{yh} t=#{xt},#{yt}"
      # pp @visited
      # print_visits()
    end

    # print_visits()
    # pp @visited.keys.sort
    puts "ANSWER #{ @visited.keys.length}"

  end


  #############################################################################

  def tail_move(knots, i, move, dir)
    head = knots[i]
    tail = knots[i+1]

    # sign matters, tells you dir of movement
    # Always H-T

    # Tail does not move in these examples:
    #
    # .T.  1,2
    # .H.  1,1
    # ...      H-T diff 0,-1
    #
    # .T.  1,2
    # H..  0,1
    # ...      H-T diff -1,-1
    #
    # ...
    # H..  0,1
    # .T.  1,0 H-T diff -1,1
    #

    # Tail moves in these examples

    # diagonal T moves up/down to same row
    #
    # ..T  H 0,1
    # H..  T 2,2
    # ...  H-T diff -2,-1 new T 1,1
    #
    # ...  H 0,1
    # H..  T 2,0
    # ..T  H-T diff -2,1 new T 1,1
    #
    # T..  H 2,1
    # ..H  T 0,2
    # ...  H-T diff 2,-1 new T 1,1
    #
    # ...  H 2,1
    # ..H  T 0,0
    # T..  H-T diff 2,1 new T 1,1
    #
    # diagonal T moves left right to same col
    #
    # T..  H 1,0
    # ...  T 0,2
    # .H.  H-T diff 1,-2 new T 1,1
    #
    # ..T  H 1,0
    # ...  T 2,2
    # .H.  H-T diff -1,-2 new T 1,1
    #
    # .H.  H 1,2
    # ...  T 0,0
    # T..  H-T diff 1,2 new T 1,1
    #
    # .H.  H 1,2
    # ...  T 2,0
    # ..T  H-T diff -1,2 new T 1,1
    #
    #
    # This is possible when some knot in the knot trail moves to
    # follow prev knot.
    
    # ..H  H 2,2
    # ...  T 0,0
    # T..  H-T diff 2,2 new T 1,1
    #
    # .....H.
    # .....x.  
    # .....x.  
    # .abc...
    # .......
    # .......
    #
    # .....H.
    # .....x.  
    # .....x.
    # .......
    # .abc...
    # T......
    # .......  
    #
    # .....H.
    # .....x.  
    # .....x.
    # ...abc.
    # .......
    # .......
    # .......  
    
    
    # Need to move t next/behind h.  How do you know if should be one
    # more or one less? If the diff is neg or pos?
    #
    # if diff neg add 1 to H to get new T
    # if diff pos sub 1 from H to get new T

    # horizontal/vertical moves
    #
    # ..T  2,2
    # ...
    # ..H  2,0 H-T diff 0,-2 new T 2,1
    #
    # ..H  2,2
    # ...
    # ..T  2,0 H-T diff 0,2  new T 2,1
    #
    # ...
    # H.T 0,1 2,1
    # ... H-T diff -2,0 new T 1,1
    #
    # ...
    # T.H 0,1 2,1
    # ... H-T diff 2,0 new T 1,1
    #
    # Need to move t next/behind h.  How do you know if should be one
    # more or one less? If the diff is neg or pos?
    #
    # if diff neg add 1 to H to get new T
    # if diff pos sub 1 from H to get new T
    #

    #puts "tail_move h=#{head} t=#{tail}"
    xdiff = head[0] - tail[0]
    ydiff = head[1] - tail[1]
    #if xdiff.abs > @diff || ydiff.abs > @diff
    if xdiff.abs <= @diff && ydiff.abs <= @diff
      # nothing to move
      return
    end

    if knots[-2][0] != 0 && i == 7
      #binding.pry
    end
    # if xdiff.abs > @diff && ydiff.abs > @diff
    #   if xdiff < 0
    #     tail[0] = head[0] + 1
    #   elsif xdiff > 0
    #     tail[0] = head[0] - 1
    #   end
    #   if ydiff < 0
    #     tail[1] = head[1] + 1
    #   elsif ydiff > 0
    #     tail[1] = head[1] - 1
    #   end
    # elsif xdiff.abs > @diff
    #   if xdiff < 0
    #     tail[0] = head[0] + 1
    #   elsif xdiff > 0
    #     tail[0] = head[0] - 1
    #   end
    #   #tail[1] = head[1]
    # elsif ydiff.abs > @diff
    #   if ydiff < 0
    #     tail[1] = head[1] + 1
    #   elsif ydiff > 0
    #     tail[1] = head[1] - 1
    #   end
    #   #tail[0] = head[0]
    # end


    ih = knots.find_index(head)
    it = knots.find_index(tail)
    puts "i=#{i} h=#{ih}:#{head} t=#{it}:#{tail} xdiff=#{xdiff} ydiff=#{ydiff} #{knots}" if @debug


    if xdiff.abs > @diff && ydiff.abs > @diff
      # diag move, T should change x and y by 1 each.
      #
      # This was the hardest part of solving part 2.  I did not get that H could move such that T was diag away, like this:
      #
      # ..H  H 2,2
      # ...  T 0,0
      # T..  H-T diff 2,2 new T 1,1
      #
      if xdiff > 0      
        tail[0] = head[0] - 1
      else
        tail[0] = head[0] + 1
      end
      if ydiff > 0      
        tail[1] = head[1] - 1
      else
        tail[1] = head[1] + 1
      end
    elsif xdiff.abs > @diff
      if xdiff < 0
        tail[0] = head[0] + 1
      elsif xdiff > 0
        tail[0] = head[0] - 1
      end
      tail[1] = head[1]
    elsif ydiff.abs > @diff
      if ydiff < 0
        tail[1] = head[1] + 1
      elsif ydiff > 0
        tail[1] = head[1] - 1
      end
      tail[0] = head[0]
    end

  end

  def make_moves_2(moves, num_knots)
    #knots = Array.new(num_knots)
    knots = []
    0.upto(num_knots) do |k|
      #knots << [11,5]
      knots << [0,0]
    end
    pp knots

    #print_visits()
    #puts "="*80

    # mark starting point visited
    mark_visit(knots[-1][0], knots[-1][1])

    moves.each do |m|
      (dir, num) = m.split(' ')
      num = num.to_i
      #puts "#{dir} #{num} start knots=#{knots}"

      0.upto(num-1) do |step|
        # Move head knot where supposed to go
        if dir == 'R'
          knots[0][0]+=1
        elsif dir == 'L'
          knots[0][0]-=1
        elsif dir == 'U'
          knots[0][1]+=1
        elsif dir == 'D'
          knots[0][1]-=1
        end

        puts "== #{dir} #{step+1} of #{num}" if @debug
        # check each knot following head to see if it needs to move.
        0.upto(num_knots-1) do |k|
          tail_move(knots, k, step, dir)
        end

        # add tail knot to visited
        pp "visited #{knots[-1]}"
        mark_visit(knots[-1][0], knots[-1][1])
        print_visits(knots) if @debug
      end

      puts "#{dir} #{num} end knots=#{knots}" if @debug
      # pp @visited
      print_visits(knots) if @debug
    end

    print_visits(knots)
    # pp @visited.keys.sort
    puts "ANSWER #{@visited.keys.length}"

  end


end

def read_input(file_name)
  file = File.open(file_name)
  input_data = file.read

  moves = []
  input_data.each_line do |line|
    line.chomp!
    moves << line
  end
  return moves
end


moves = read_input('aoc_09_2022_sample_input.txt')

p = Puzzle.new(moves, 1)
p.test_moves
p.make_moves(moves)
puts "---"
p = Puzzle.new(moves, 1)
p.test_moves
p.make_moves_2(moves, 2)


moves = read_input('aoc_09_2022_input.txt')

p = Puzzle.new(moves, 1)
p.test_moves
p.make_moves(moves)
puts "---"
p = Puzzle.new(moves, 1)
p.test_moves
p.make_moves_2(moves, 2)

# 5801 too low
#
# 6012 too high
#
# 6011 was it, not sure what I changed to fix the off by one
# error... typical tho...


puts "-------- part 2 sample -----"
moves = read_input('aoc_09_2022_sample_input.txt')
p = Puzzle.new(moves, 1)
p.test_moves
p.make_moves_2(moves, 9)


puts "-------- part 2 sample 2nd example -----"
moves = read_input('aoc_09_2022_sample_input_part2.txt')
p = Puzzle.new(moves, 1)
p.test_moves
p.make_moves_2(moves, 9)

puts "-------- part 2 -----"
moves = read_input('aoc_09_2022_input.txt')
p = Puzzle.new(moves, 1)
p.test_moves
p.make_moves_2(moves, 9)
